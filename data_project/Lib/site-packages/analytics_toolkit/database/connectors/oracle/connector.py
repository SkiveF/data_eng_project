from typing import Optional

from sqlalchemy import create_engine
from sqlalchemy.engine.base import Engine

from ..generic import DatabaseConnector


class OracleDatabaseConnector(DatabaseConnector):
    """
    Connector to use Oracle in Python
    """

    def __init__(
        self,
        database: str,
        username: Optional[str] = None,
        password: Optional[str] = None,
        host: Optional[str] = None,
        port: Optional[int] = None,
    ):
        """
        Instantiates a Oracle Data Warehouse connector.

        Args:
            database (str): database to use.
            username (str, optional): username in the system. If None, tries to use the environment
                variable "ORACLE_USERNAME" or prompts the user.
            password (str, optional): password in the system. If None, tries to use the environment
                variable "ORACLE_PASSWORD" or prompts the user.
            host (str, optional): host of the Oracle server. Defaults to the database name. It is
                the case for "POCFR3" database for instance, in Catalina.
            port (int, optional): port of the Oracle server. Defaults to 1521.
        """
        super().__init__(app_name="oracle", username=username, password=password)

        # Oracle specific parameters
        self.database = database
        self.host = host if host is not None else self.database
        self.port = port if port is not None else 1521

        # SQLAlchemy engine
        self.engine = self.get_sqlalchemy_engine()

    def get_sqlalchemy_engine(self) -> Engine:
        database_url = (
            f"oracle+cx_oracle://{self.username}:{self.password}"
            f"@{self.host}:{self.port}/?service_name={self.database}"
        )
        return create_engine(database_url)

    def _drop_columns(
        self, table_name: str, columns: list[str], table_columns: list[str]
    ):
        """
        Private method to drop columns in a table. To be overridden. Similar, but not equal to
        the method for Snowflake.
        """
        drop_columns = set(columns) & set(table_columns)
        query = f"ALTER TABLE {table_name} DROP ({', '.join(drop_columns)})"
        self.execute_query(query)
