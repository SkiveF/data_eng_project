"""All utilities linked to .xlsx, .csv or .pdf files."""
import os
import shutil
import subprocess
import sys
from importlib.util import find_spec
from pathlib import Path
from typing import Union
from uuid import uuid4

from PyPDF2 import PdfFileReader, PdfFileWriter


def convert_excel_to_pdf(
    source: Union[Path, str],
    destination: Union[Path, str, None] = None,
    keep_sheets: Union[str, list[str], int, list[int], None] = None,
) -> Path:
    """
    Converts a given Excel file to PDF format.

    Args:
        source (Union[Path, str]): path of the .xlsx file to convert to PDF
        destination (Union[Path, str, None], optional): path of the .pdf file to create.
            If it is a folder + file, uses it as destination. Assumes .pdf extension.
            If it is a folder, uses it & name of the .xlsx file.
            If None, uses the same folder & name as the .xlsx file. Defaults to None.
        keep_sheets (Union[str, list[str], int, list[int]]): sheets to keep in the PDF file.
            (Linux & Windows) If int or list[int], keeps the sheets with the corresponding
                numbers in the given order (first sheet being 1, and not 0).
                Warning! On Linux, this does not work well for sheets different than the first ones.
            (Windows only) If str or list[str], keeps the sheets with the corresponding names in
                the given order
            If None, keeps all the sheets in the PDF file. Defaults to None.

    Returns:
        Path: path of the destination file
    """
    converter = ExcelToPDFConverter(
        source, destination=destination, keep_sheets=keep_sheets
    )
    converter.convert_excel_to_pdf()

    return converter.destination


class ExcelToPDFConverter:
    """Class to convert an excel file to PDFs"""

    def __init__(
        self,
        source: Union[Path, str],
        destination: Union[Path, str, None] = None,
        keep_sheets: Union[str, list[str], int, list[int], None] = None,
    ):
        """Class initialization. Check function convert_excel_to_pdf for info on the arguments."""
        # Paths
        self.source = source if isinstance(source, Path) else Path(source)
        self.destination = self.setup_destination(destination)

        # Sheets to keep
        self.keep_sheets = keep_sheets
        if isinstance(self.keep_sheets, (str, int)):
            self.keep_sheets = [self.keep_sheets]

        # Linux does not support keeping sheets by their names
        if (
            sys.platform == "linux"
            and isinstance(self.keep_sheets, list)
            and isinstance(self.keep_sheets[0], str)
        ):
            msg = "On Linux, it is impossible to choose sheets to convert using names. "
            msg += "Please use their sheet numbers."
            raise ValueError(msg)

    def setup_destination(self, destination: Union[Path, str, None]) -> Path:
        """
        Sets up the destination file path, as explained in the class initialization docstring.

        Args:
            destination (Union[Path, str, None]): path of the .pdf file to create.

        Returns:
            Path: path of the destination file
        """
        destination = Path(destination) if isinstance(destination, str) else destination
        # If None, uses the same folder & name as the .xlsx file.
        if destination is None:
            return self.source.parent / f"{self.source.stem}.pdf"
        # If it is a folder, uses it & name of the .xlsx file.
        if os.path.isdir(destination):
            return destination / f"{self.source.stem}.pdf"
        # If it is a folder + file, uses it as destination.
        else:
            if destination.suffix != ".pdf":
                raise ValueError(f"{destination=} is not ending by .pdf!")
            return destination

    def convert_excel_to_pdf(self):
        """Converts source to PDF format to the appropriate destination."""
        os.makedirs(self.destination.parent, exist_ok=True)
        if sys.platform.startswith("linux"):
            self.convert_excel_to_pdf_linux()
        else:
            self.convert_excel_to_pdf_windows()

    def convert_excel_to_pdf_linux(self):
        """Uses libreoffice to convert file to pdf format."""

        # Converts the whole file to PDF
        command = [
            "libreoffice7.2",
            "--headless",
            "--convert-to",
            "pdf",
            str(self.source.absolute()),
            "--outdir",
            str(self.destination.parent.absolute()),
        ]
        subprocess.run(command, check=True, capture_output=True)

        # Rename the file generated by libreoffice if the filename needs to change
        if self.source.stem != self.destination.stem:
            to_rename = self.destination.parent / f"{self.source.stem}.pdf"
            os.rename(to_rename, self.destination)

        # Keep only some sheets if needed
        if self.keep_sheets:
            # Create a temporary file
            temp_filename = self.destination.parent / f"{str(uuid4())}.pdf"
            os.rename(self.destination, temp_filename)

            # Write the new file with only some sheets in it
            pdf_writer = PdfFileWriter()
            with open(temp_filename, "rb") as file_in:
                pdf_reader = PdfFileReader(file_in)
                for page in self.keep_sheets:
                    pdf_writer.addPage(pdf_reader.getPage(page - 1))
                with open(self.destination, "wb") as file_out:
                    pdf_writer.write(file_out)

            # Delete a temporary file
            os.remove(temp_filename)

    def convert_excel_to_pdf_windows(self):
        """Uses win32com to convert file to pdf format."""
        # Check if pywin32 is installed before continuing.
        if find_spec("win32com") is None:
            msg = "Please install pywin32 'conda install pywin32' to use this function."
            raise ValueError(msg)

        import win32com.client

        client = win32com.client.Dispatch("Excel.Application")
        client.Visible = False
        workbook = client.Workbooks.Open(str(self.source.absolute()))

        # If no keep_sheets, get all sheet names
        if self.keep_sheets is None:
            select_sheets = [sheet.Name for sheet in workbook.Sheets]
        else:
            select_sheets = self.keep_sheets

        # Export the selected sheets
        workbook.WorkSheets(select_sheets).Select()
        workbook.ActiveSheet.ExportAsFixedFormat(0, str(self.destination.absolute()))
        workbook.Close(True)


def remove_last_line_from_csv(filepath: Union[str, Path], copy: bool = False):
    """
    Removes the last line break from a .csv file.

    Args:
        filepath (Union[str, Path]): path to the .csv file.
        copy (bool, optional): If True, copies the file into the current working directory, removes
            the last line, and moves it back to. Defaults to False.
    """
    filepath = Path(filepath) if isinstance(filepath, str) else filepath

    # If copy, copies the file to make the computations there
    if copy:
        original_filepath = filepath
        filepath = str(uuid4()) + filepath.suffix
        shutil.copy(original_filepath, filepath)

    with open(filepath, "r") as file:
        lines = file.readlines()
        lines[-1] = lines[-1].rstrip("\n")

    with open(filepath, "w") as file:
        file.writelines(lines)

    # If copy, moves the new file back
    if copy:
        shutil.move(filepath, original_filepath)
