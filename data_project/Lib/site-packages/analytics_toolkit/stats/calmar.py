"""Functions linked to margin setting (CALMAR) using the Icarus R library."""
import json
import tempfile
from getpass import getuser
from subprocess import CalledProcessError, CompletedProcess, run
from typing import Optional

import pandas as pd
from analytics_toolkit.execution import get_analytics_logger, log_execution


def calmar(
    df: pd.DataFrame,
    vars_cible: list[str] = None,
    vars_flags: dict[str, list[str]] = None,
) -> tuple[pd.DataFrame, CompletedProcess]:
    """
    Makes a margin setting using the ICARUS package on R.

    Args:
        df (pd.DataFrame): DataFrame on which to execute the margin setting. This DataFrame must
            have the columns defined in vars_cible & vars_flags (or the default ones)
        vars_cible (list[str], optional): list of variables to target.
            If None, uses default columns in the Icarus Script. Defaults to None.
            The default columns for this variable is: [f"CIBLE_{i}" for i in range(1, 11)]

        vars_flags (dict[str, list[str]], optional): list of flags to use.
            If None, uses default flags in the Icarus Script. Defaults to None.
            The default values for vars_flags is:
            {
                'FLAG_STORE': ['CA_BEFORE','TRIPS_BEFORE','CA_3_MONTHS', 'TRIPS_3_MONTHS','RECENCE','REGULARITY'],
                'FLAG_RAYON': ['CA_BEFORE_RAYON','TRIPS_BEFORE_RAYON','CA_3_MONTHS_RAYON','TRIPS_3_MONTHS_RAYON','RECENCE_RAYON','REGULARITY_RAYON'],
                'FLAG_PP': ['CA_BEFORE_PP','TRIPS_BEFORE_PP','CA_3_MONTHS_PP','TRIPS_3_MONTHS_PP','RECENCE_PP','REGULARITY_PP']
            }

    Returns:
        tuple[pd.DataFrame, CompletedProcess]: DataFrame containing the output of the margin
            setting, and the output (stdout, stderr) of the Rscript execution.
    """
    icarus = Icarus(df, vars_cible=vars_cible, vars_flags=vars_flags)
    return icarus.run()


class Icarus:
    """Class to use ICARUS"""

    def __init__(
        self,
        df: pd.DataFrame,
        vars_cible: list[str] = None,
        vars_flags: dict[str, list[str]] = None,
    ) -> None:
        """
        Class initialization.

        Args:
            df (pd.DataFrame): DataFrame on which to execute the margin setting. This DataFrame must
                have the columns defined in vars_cible & vars_flags (or the default ones)
            vars_cible (list[str], optional): list of variables to target.
                If None, uses default columns in the Icarus Script. Defaults to None.
                The default columns for this variable is: [f"CIBLE_{i}" for i in range(1, 11)]

            vars_flags (dict[str, list[str]], optional): list of flags to use.
                If None, uses default flags in the Icarus Script. Defaults to None.
                The default values for vars_flags is:
                {
                    'FLAG_STORE': ['CA_BEFORE','TRIPS_BEFORE','CA_3_MONTHS', 'TRIPS_3_MONTHS','RECENCE','REGULARITY'],
                    'FLAG_RAYON': ['CA_BEFORE_RAYON','TRIPS_BEFORE_RAYON','CA_3_MONTHS_RAYON','TRIPS_3_MONTHS_RAYON','RECENCE_RAYON','REGULARITY_RAYON'],
                    'FLAG_PP': ['CA_BEFORE_PP','TRIPS_BEFORE_PP','CA_3_MONTHS_PP','TRIPS_3_MONTHS_PP','RECENCE_PP','REGULARITY_PP']
                }

        """
        # Main variables
        self.df = df
        self.vars_cible = vars_cible
        self.vars_flags = vars_flags

        # Temporary directory to create
        self.icarus_folder = tempfile.TemporaryDirectory(prefix=f"{getuser()}_icarus_")
        self.logger = get_analytics_logger()
        self.logger.info(f"{self.icarus_folder.name=}")

    def run(self) -> tuple[pd.DataFrame, CompletedProcess]:
        """
        Runs the margin setting (CALMAR) using Icarus R script.

        Returns:
            tuple[pd.DataFrame, CompletedProcess]: DataFrame containing the output of the margin
                setting, and the output (stdout, stderr) of the Rscript execution.
        """
        self.load_inputs()
        result = self.execute_icarus_script()
        df_output = pd.read_csv(f"{self.icarus_folder.name}/output.csv")

        return df_output, result

    def load_inputs(self) -> None:
        """Load inputs to the proper files."""
        # Input DataFrame
        self.df.to_csv(f"{self.icarus_folder.name}/input.csv", index=False)

        # Cibles
        if self.vars_cible is not None:
            if not isinstance(self.vars_cible, list):
                raise TypeError("vars_cible argument must be a list[str]")
            with open(f"{self.icarus_folder.name}/cible.json", "w") as outfile:
                json.dump(self.vars_cible, outfile)

        # Flags
        if self.vars_flags is not None:
            if not isinstance(self.vars_flags, dict):
                raise TypeError("vars_flags argument must be a dict[str, list[str]]")
            with open(f"{self.icarus_folder.name}/flags.json", "w") as outfile:
                json.dump(self.vars_flags, outfile)

    @log_execution
    def execute_icarus_script(self) -> CompletedProcess:
        """Executes the Icarus script."""
        program, folder = "Rscript", self.icarus_folder.name
        arguments = {
            "/workspace/R/icarus/icarus.R": None,
            "--input": f"{folder}/input.csv",
            "--output": f"{folder}/output.csv",
        }
        if self.vars_cible is not None:
            arguments.update(**{"--cible": f"{folder}/cible.json"})

        if self.vars_flags is not None:
            arguments.update(**{"--flags": f"{folder}/flags.json"})

        args = [program, *self.parse_arguments(arguments=arguments)]

        try:
            result = run(args=args, capture_output=True, check=True)
        except CalledProcessError as error:
            msg = f"{program} failed.\n Output: {error.stdout}.\n Error: {error.stderr}"
            raise ValueError(msg) from error

        return result

    @staticmethod
    def parse_arguments(arguments: dict[str, Optional[str]]) -> list[str]:
        """
        Parse arguments given as Dict into a list that can be read by subprocess.call().

        Args:
            arguments (dict[str, Optional[str]]): arguments to pass to an executable.
            Pass {key: value} for arguments that need values, {key: None} for those who don't.

        Returns:
            list[str]: list of arguments that can be read by subprocess.call().
        """
        return [
            element
            for key, value in arguments.items()
            for element in ([key, value] if value is not None else [key])
        ]
